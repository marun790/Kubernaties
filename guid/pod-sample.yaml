apiVersion: v1
kind: Pod
metadata:
  name: "uniquely identifies this object"
  namespace: "DNS compatible label"
  uid: "used to distinguish between objects with the same name that have been deleted and recreated"
  labels:
    env: "TEST"
    app: "my-app"
  annotations:
      image: "gold-image"
spec:
  restartPolicy: OnFailure # Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always
  activeDeadlineSeconds: 1  # pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers
  automountServiceAccountToken: false # indicates whether a service account token should be automatically mounted.
  terminationGracePeriodSeconds: 30 #  after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. 
  hostAliases: # Adding entries to a Pod’s /etc/hosts file provides Pod-level override of hostname resolution when DNS and other options are not applicable
  - ip: "127.0.0.1"
    hostnames:
    - "foo.local"
    - "bar.local"
  - ip: "10.1.2.3"  
    hostnames:
    - "foo.remote"
    - "bar.remote"
  hostIPC: false # Use the host's ipc namespace. Optional: Default to false
  hostNetwork: false # Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.
  hostPID: false # Use the host's pid namespace. Optional: Default to false.
  hostname: "" # Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value
  imagePullSecrets: # Specifies references to secrets in the same namespace to use for pulling any of the images
  - name: myregistrykey
  nodeName: node1 # NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements
  nodeSelector:
    gpu : "true"
  schedulerName: "" # If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.
  subdomain: "" # If specified, the fully qualified Pod hostname will be "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>". If not specified, the pod will not have a domainname at all.
  volumes:
  - name: my-app-volume-storage
    emptyDir: {}
  tolerations:
  - key: "key"
    value: "value"
    operator: "Equals"
    effect: "NoSchedule"
  - key: "key"
    operator: "Exists"
    effect: "NoExecute"
    tolerationSeconds: 3600
  containers:
  - image:  alpine
    name:  my-app-container
    ports: # List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. 
    - name: "unique within the pod"
      containerPort: 8080 # Number of port to expose on the pod's IP address
      hostIP: 10.0.0.0 # What host IP to bind the external port to
      hostPort: 8080 # Number of port to expose on the host
      protocol: UDP # UDP or TCP. Defaults to TCP
    imagePullPolicy: Always # One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
    resources: # Compute Resources required by this container
      limits: # Limits describes the maximum amount of compute resources allowed
        cpu: 500m
        memory: 512Mi
      requests:  # Requests describes the minimum amount of compute resources required.
        cpu: 500m
        memory: 512Mi
    env:
    - name: GREETING
      value: "Hello Greeting from the environment"
    - name: HONORABLE
      value: "The Most Honorable" 
    - name: NAME
      value: "Kubernetes"  
    command: ["echo"]
    args: ["${GREETING}", "${HONORABLE}", "${NAME}"]  # Arguments to the entrypoint. The docker image's CMD is used if this is not provided.
    lifecycle:
      postStart: # PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. 
        exec:
          command: 
          - /bin/sh
          - -c
          - touch /tmp/healthy; sleep 30; rm -rf /tmp/healthy; sleep 600
        httpGet:
          host: ""
          path: ""
          port: 65535
          scheme: ""
          httpHeaders:
          - name: ""
            value: ""  
        tcpSocket:
          host: ""
          port: 2568    
      preStop: # PreStop is called immediately before a container is terminated. The container is terminated after the handler completes. The reason for termination is passed to the handler. Regardless of the outcome of the handler, the container is eventually terminated.
        exec:
          command: ["echo"]
        httpGet:
          host: ""
          path: ""
          port: 8080
          scheme: ""
          httpHeaders:
          - name: ""
            value: ""  
        tcpSocket:
          host: ""
          port: 2568    
    livenessProbe: # Indicates whether the Container is running. If the liveness probe fails, the kubelet kills the Container. Default Success
      exec: # Executes a specified command inside the Container. The diagnostic is considered successful if the command exits with a status code of 0
        command:
        - cat
        - /tmp/healthy
      httpGet: # Performs an HTTP Get request against the Container’s IP address on a specified port and path. The diagnostic is considered successful if the response has a status code greater than or equal to 200 and less than 400
        host: ""
        path: "/healthCheck"
        port: 8080
        scheme: ""
        httpHeaders:
        - name: ""
          value: ""  
      tcpSocket: # Performs a TCP check against the Container’s IP address on a specified port. The diagnostic is considered successful if the port is open
        host: ""
        port: 2568    
      failureThreshold: 3 # Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3.
      initialDelaySeconds: 20 # Number of seconds after the container has started before liveness probes are initiated
      periodSeconds: 15 # How often (in seconds) to perform the probe. Default to 10 seconds
      successThreshold: 3 # Minimum consecutive successes for the probe to be considered successful after having failed
      timeoutSeconds: 20 # Number of seconds after which the probe times out  
    readinessProbe: # Indicates whether the Container is ready to service requests.If the readiness probe fails, the endpoints controller removes the Pod’s IP address from the endpoints of all Services 
      exec: # Executes a specified command inside the Container. The diagnostic is considered successful if the command exits with a status code of 0
        command: ["echo"]
      httpGet: # Performs an HTTP Get request against the Container’s IP address on a specified port and path. The diagnostic is considered successful if the response has a status code greater than or equal to 200 and less than 400
        host: ""
        path: "/readyCheck"
        port: 8080
        scheme: "HTTP"
        httpHeaders:
        - name: ""
          value: ""  
      tcpSocket: # Performs a TCP check against the Container’s IP address on a specified port. The diagnostic is considered successful if the port is open
        host: ""
        port: 2568    
      failureThreshold: 3 # Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3.
      initialDelaySeconds: 20 # Number of seconds after the container has started before readinessProbe probes are initiated
      periodSeconds: 15 # How often (in seconds) to perform the probe. Default to 10 seconds
      successThreshold: 3 # Minimum consecutive successes for the probe to be considered successful after having failed
      timeoutSeconds: 20 # Number of seconds after which the probe times out  
    stdin: false # Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF       
    stdinOnce: false    
    terminationMessagePath: "/terminate"
    terminationMessagePolicy: "FallbackToLogsOnError" # valid value is "File" or "FallbackToLogsOnError"
    tty: false # Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
    workingDir: "/home" # Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image
    volumeDevices: # Using raw block device persistent volumes
    - name: "pod-volume-device"
      devicePath: "/dev/xvda"
    volumeMounts:
    - name: "my-app-volume-storage" # This must match the Name of a Volume.
      mountPath: "/data/tmp" # Path within the container at which the volume should be mounted. Must not contain ':'.
      readOnly: false # Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
      subPath: "" # Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).

#  serviceAccountName
#  shareProcessNamespace
#  priority  
#  priorityClassName
#  nodeSelector
#  readinessGates: # If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to "True"
#  dnsConfig: # Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration
#  dnsPolicy: # Set DNS policy for the pod. Defaults to "ClusterFirst". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'
#  securityContext: # SecurityContext holds security configuration that will be applied to a container as well as pod.
#  affinity: